{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"home/","title":"Home","text":"<p><code>codefly</code> is the Next Gen Developer Platform.</p>"},{"location":"home/#features","title":"Features","text":""},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2016-2023 Martin Donath</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"concepts/agent/","title":"Agent","text":"<p>In software engineering, a software agent is a computer program that works on behalf of a user or another program.</p> <p>In our case, a Service Agent works on behalf of the service it represents.</p> <p>There is some overlap between microservices architecture and the Actor model in terms of concepts and philosophy.</p> <p>A very good way to think about Agent is to look as what Hollywood agents do for movie actors.</p> <p>The runtime would be the actor actually reading his lines during the shoot of the movie. But to get to that point, there are a lot of things that need to happen.</p> <p>And usually the Agent is the interface (API) between studios, magazine, directors, etc..and the actor itself.</p> <p>This is a very accurate comparison to describe what an Agent is for codefly: it is the prefered way of interaction (including creation, modification, enhancement, etc...) with the actor UP to the point of runtime.</p>"},{"location":"concepts/endpoint/","title":"Endpoint","text":""},{"location":"concepts/module/","title":"A module","text":""},{"location":"concepts/overview/","title":"Concepts","text":""},{"location":"concepts/overview/#codefly-software-development-model","title":"Codefly Software Development Model","text":"<p>Codefly encourages and help you to organize your code. The fundamental hierarchy is:</p> <ul> <li>Organization</li> <li>Workspace</li> <li>Project</li> <li>Application</li> <li>Service</li> </ul> <p>Note Organizations, workspaces provide isolation level for large or complex businesses. For most usages, a global organization and workspace is recommened.</p>"},{"location":"concepts/overview/#project","title":"Project","text":"<p>A project typically corresponds to a business line. They are meant to be completely independent.</p> <p>A project is made of Applications.</p> <p>Example: A project could correspond to your monorepo in your company.</p> <p>Details</p>"},{"location":"concepts/overview/#application","title":"Application","text":"<p>An application is a group of services that work together to provide some functionality to your system.</p> <p>Important Behavior for an application is provided only by its services. This happens when some service endpoints are declared with an application visibility.</p> <p>Details</p> <p>Note An application corresponds closely with the concept of \"Bounded Context\" in Domain-Driven Design.</p>"},{"location":"concepts/overview/#service","title":"Service","text":"<p>A service is also a logical component but backed up by some processing power!</p> <p>Important The role of a service is to provide some behavior exposed through its endpoints.</p> <p>Endpoints define the behavior of the service.</p> <p>Example A web server is a service with a HTTP endpoint.</p> <p>It can be a single container or a collection of them.</p> <p>Services expose endpoints with different visibilities: - private: access allowed only to other services in the same application - application: access allowed to other application services - public: access allowed to external users</p> <p>Example Redis caching is a service with two endpoints: read and a write. Whether the underlying deployment uses a single instance or master/replicas or cluster doesn't matter. Other services should only be made aware of the two endpoints.</p> <p>Details</p>"},{"location":"concepts/overview/#endpoints","title":"Endpoints","text":"<p>Details</p>"},{"location":"concepts/service/","title":"Service","text":""},{"location":"concepts/workspace/","title":"Workspace","text":""},{"location":"developers/code_structure/","title":"Components","text":"<p>codefly is built from the ground up to build, test, deploy and maintain microservices based architectures.</p> <p>We follow as best as we can the philosophy of Domain Driven Design (DDD).</p> <p>Here are from highest level to lowest the structure of system in codefly.</p>"},{"location":"developers/code_structure/#workspace","title":"Workspace","text":"<p>This is the highest level in codefly where logical dependencies can be handled.</p> <p>Examples: - a mono-repository can be represented as a workspace or as a collection of independent workspaces. - dependent components, a website and a backend should belong to the same workspace.</p>"},{"location":"developers/code_structure/#module","title":"Module","text":"<p>A module is codefly term for bounded context in DDD.</p> <p>This corresponds to a group of services who can communicate by default with each other using private endpoints.</p>"},{"location":"developers/code_structure/#service","title":"Service","text":"<p>Will contain all the code required to run a service as well as some configurations.</p>"},{"location":"developers/code_structure/#code-structures","title":"Code Structures","text":"<p>codefly allows different layouts to map components to code structure.</p> <p>In the layout diagrams, <code>${something}</code> a variable, can be the name of an environment or a service.</p>"},{"location":"developers/code_structure/#flat-layout","title":"Flat Layout","text":"<p>This corresponds to a single module containing all service.</p> <p>This default module will be identified with the workspace itself and not exposed to the user.</p> <p>Examples: - 3-Tier applications</p> <pre><code>workspace/\n\u251c\u2500\u2500 \ud83d\udcc2 configurations\n|   \u251c\u2500\u2500 \ud83d\udcc2 ${dev}\n\u2502   \u2514\u2500\u2500 \ud83d\udcc2 ${production}\n\u2514\u2500\u2500 \ud83d\udcc2 services\n\u2502   \u251c\u2500\u2500 \ud83d\udcc2 ${frontend}\n\u2502   \u251c\u2500\u2500 \ud83d\udcc2 ${backend}\n\u2502   \u2514\u2500\u2500 \ud83d\udcc2 ${database}\n</code></pre>"},{"location":"developers/code_structure/#module-layout","title":"Module Layout","text":"<p>This is the preferred organization as we map logical to physical separation.</p> <pre><code>workspace/\n\u251c\u2500\u2500 \ud83d\udcc2 configurations\n|   \u251c\u2500\u2500 \ud83d\udcc2 ${dev}\n\u2502   \u2514\u2500\u2500 \ud83d\udcc2 ${prod}\n\u2514\u2500\u2500 \ud83d\udcc2 modules\n\u2502   \u2514\u2500\u2500 \ud83d\udcc2 ${management}\n|       \u2514\u2500\u2500 \ud83d\udcc2services\n|           \u251c\u2500\u2500 \ud83d\udcc2 ${backend}\n|           \u251c\u2500\u2500 \ud83d\udcc2 ${cache}\n|           \u2514\u2500\u2500 \ud83d\udcc2 ${database}\n\u2502   \u2514\u2500\u2500 \ud83d\udcc2 ${external}\n|           \u251c\u2500\u2500 \ud83d\udcc2 ${frontend}\n|           \u2514\u2500\u2500 \ud83d\udcc2 ${api}\n</code></pre>"},{"location":"developers/definitions/","title":"Definitions and conventions","text":"<p>Software Development Life-Cycle follows a succession of steps.</p> <p>For clarity, we group some definitions and conventions of usage by these steps.</p>"},{"location":"developers/definitions/#generic","title":"Generic","text":""},{"location":"developers/definitions/#endpoint","title":"Endpoint","text":"<p>An endpoint is a generalization of an API.</p> <p>Examples: - a REST backend has a REST endpoint defined by its openapi documentation - a gRPC backend has an gRPC endpoint defined by its schema - a redis instance has TCP endpoint</p> <p>All endpoints have a a visibility. Visibility are classified as follows: - private: accessible by default only to resources in the same module - module: potentially accessible to resources in other module - public: accessible from the internet</p>"},{"location":"developers/definitions/#service","title":"Service","text":"<p>A Service is an abstraction for some compute responsible to make available a set of endpoints at any point in time.</p> <p>The boundaries of what a service are completely arbitrary.</p>"},{"location":"developers/definitions/#development","title":"Development","text":""},{"location":"developers/definitions/#test","title":"Test","text":""},{"location":"developers/definitions/#build","title":"Build","text":""},{"location":"developers/definitions/#deploy","title":"Deploy","text":""},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#install-the-cli","title":"Install the CLI","text":""},{"location":"getting-started/installation/#macos","title":"MacOS","text":"<pre><code>brew tap codefly-dev/cli\n</code></pre> <pre><code>brew install codefly\n</code></pre>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<pre><code>curl -s https://raw.githubusercontent.com/codefly-dev/cli-releases/main/install/linux.sh | bash\n</code></pre>"},{"location":"getting-started/installation/#windows","title":"Windows","text":"<p>Coming soon!</p>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p><code>codefly</code> requires <code>Docker</code> to be installed on your machine and that's IT!</p> <p>No local <code>python</code> installation, no manual package management, no <code>npm</code> installation, nothing but Docker by default!</p> <p>One of the responsibilities of <code>codefly</code> agents is to manage the dependencies for you.</p>"},{"location":"getting-started/overview/","title":"Getting started","text":""},{"location":"getting-started/overview/#install-the-cli","title":"Install the CLI","text":"<p>See the installation guide for instructions on how to install the <code>codefly</code> CLI.</p>"},{"location":"getting-started/overview/#tutorials","title":"Tutorials","text":""},{"location":"getting-started/overview/#website-traffic-statistics","title":"Website Traffic Statistics","text":"<p>A very good way to get started with <code>codefly</code> is to go through the  <code>website traffic statistics</code> tutorial.</p> <p></p> <p>This example will guide you through the process of creating a simple  3-Tier application to display traffic statistics to a website.</p> <p>It will consist of a - <code>web</code> frontend - a <code>backend</code> API - a <code>database</code> to store the data - a cache to speed-up our application</p> <p>There are several choices for the backend  <code>python</code>, <code>go</code>, <code>JavaScript</code> and more to come soon.</p> <p>So let's get started: Website Traffic Statistics</p>"},{"location":"references/overview/","title":"References","text":""},{"location":"tutorials/openai/1_user_management/","title":"1 user management","text":""},{"location":"tutorials/openai/1_user_management/#go-server","title":"<code>go</code> Server","text":"<p>We want a backend server (we will call it <code>backend</code> to be original) to deal with Users. We will use the very powerful <code>go-grpc</code> agent as our base.</p> <pre><code>codefly add service backend --agent=go-grpc\n</code></pre> <p>Each agent will require some configurations, though following the recommendations is usually the safe route.</p> <p>To see the code created for you, you can run <pre><code>codefly open service\n</code></pre></p> <p>If everything went well, you should be able to run your newly created service:</p> <pre><code>codefly run service\n</code></pre> <p>While this runs, modify the code of your service and Magic you get auto-reload of your code!</p> <p>As you will see soon, <code>codefly</code> is very careful about making your Developer Experience as awesome as possible and that means doing a lot of the mundane work for you like restarting services when needed!</p>"},{"location":"tutorials/openai/1_user_management/#nextjs-auth0","title":"Nextjs + Auth0","text":"<p>To make maintenance easier, let's create a new application for the public components: the website and the API.</p> <pre><code>codefly add application frontend\n</code></pre> <p>and add the Nextjs service:</p> <pre><code>codefly add service web --agent=nexjs-auth0\n</code></pre>"},{"location":"tutorials/openai/1_user_management/#add-the-auth0-provider","title":"Add the \"auth0\", provider","text":"<p>TODO: Manual for now</p> <p>Run the service <pre><code>codefly run service\n</code></pre></p> <p>Test out the login/logout.</p> <p>Now, we want the web to be aware of the backend -- we will clean it later by adding an API Gateway.</p> <p><code>codefly add dependency</code></p> <p>And pick the \"backend\".</p> <p>Now, when running <code>frontnend</code>, it will start the backend first.</p> <p>Go, to your frontend, you will see a drop down: the Frontend is now aware of the API it can call!</p>"},{"location":"tutorials/openai/openai/","title":"Memento: From zero to OpenAI application: a Tutorial for the ages","text":"<p>Rather than using some \"hello world\" project, we will create from scratch most of complete system, all the way to CI/CD of a complex application with several components!</p> <p><code>codefly</code> value is making development easier and faster but don't trust us and decide for yourself!</p> <p>We want to build Momento, a web application that lets you upload your content and let you ask questions about it!</p> <p>As you can imagine, it is not a trivial application to build! But with <code>codefly</code>, we will build it steps by steps.</p> <p>Following this journey with us, you will get to appreciate the power of <code>codefly</code> as the most powerful Developer Platform.</p> <p>Note: Some steps are optional, and require an AWS account for a proper production development but the large majority can be done locally!</p> <p>Part I: User management</p> <p>Obviously, you don't want let everyone uploading documents to your <code>memento</code> and even more importantly, you don't want to let anyone getting access to information about other users data!</p> <p>As 99.9% of software systems, we need to manage users, authentication and authorization: part I is about this.</p> <p>Tech stack: - Auth0 for our Identity provider - <code>go</code> server for User Management - AWS RDS for storage</p> <p>Let's get started by creating a project <code>memento</code>:</p> <pre><code>codefly add project memento\n</code></pre> <p>Now, let's create an application that will contain all services required for proper user management:</p> <pre><code>codefly add application user_management\n</code></pre> <p>Note: <code>codefly</code> keeps track of what you are working on (project, application, service) so most commands with <code>codefly</code> can be ran for anywhere. Running <code>codefly</code> inside a particular application or service directory will overwrite the \"active\" context.</p> <pre><code>codefly context\n</code></pre> <p>Navigate to your project (or application or service) code:</p> <pre><code>codefly open project\n</code></pre> <p>Note: it will open VS Code, but you can specify your favorite editor like this <code>--editor=goland</code>.</p> <p>In particular, you will see that there is <code>providers/local</code> folder: this will contain credentials used for local environment.</p> <p>Copy there your Auth0 configuration <code>auth0.env</code> there: <pre><code>AUTH0_ISSUER_BASE_URL=xxx\nAUTH0_CLIENT_ID=xxx\nAUTH0_CLIENT_SECRET=xxx\n...\n</code></pre></p> <p>Now, let's start the actual work:</p> <p>1. Creating a <code>go</code> server</p>"},{"location":"tutorials/website-visits/introduction/","title":"A simple 3-Tier application: keeping track of a visits on a website","text":"<p>TODO: Diagram</p>"},{"location":"tutorials/website-visits/introduction/#introduction","title":"Introduction","text":"<p>Before we move to how to create such a system, it's important to focus on one aspect of <code>codefly</code>: the Developer Experience.</p> <p>At codefly.ai, we believe that the time to onboard and time to setup should be ZERO.</p> <p>With <code>codefly</code> and Docker installed, you should just pull a Git repository, and type <code>codefly run service</code> on the part of the system you want to run and it will.</p>"},{"location":"tutorials/website-visits/introduction/#running-things","title":"Running things","text":""},{"location":"tutorials/website-visits/introduction/#get-the-code","title":"Get the code","text":"<p>First, pull the repository with the backend that you want to use</p> <ul> <li> <p><code>python</code> <pre><code>https://github.com/codefly-dev/example-python-visitor.git\n</code></pre></p> </li> <li> <p><code>go</code> Coming soon</p> </li> <li> <p><code>Node</code> Coming soon</p> </li> </ul>"},{"location":"tutorials/website-visits/introduction/#running-everything","title":"Running everything","text":"<p>To run any service with <code>codefly</code>, you would use <code>codefly run service</code> in the service folder you want to run:</p> <pre><code>cd applications/web/services/frontend\ncodefly run service\n</code></pre> <p>Or you could run</p> <p><pre><code>codefly run service frontend\n</code></pre> anywhere inside the project folder</p> <p>In case you have several services in the project with the same name (service name uniqueness is only required at the application level), you can specify the application as well: <code>codefly run service web/frontend</code> or run it anywhere inside the <code>web</code> application folder.</p> <p></p> <p>You should see some amount of logs and let's look at a few lines:</p> <pre><code>Running &lt;frontend&gt; with these dependent services: backend/store, backend/cache, backend/server\n</code></pre> <p><code>codefly</code> recognizes that the <code>frontend</code> needs the <code>backend</code> to run which in turn requires the <code>store</code> and the <code>cache</code>.</p> <p>So <code>codefly</code> will run these services for you, in the right order and waiting when it needs to.</p> <p>So your database is ready when your service needs it.</p> <pre><code>backend/server &gt;&gt; will run on http://localhost:XXXX\n</code></pre> <p>This will be the local address for your backend <code>server</code>. Ports are automatically generated by <code>codefly</code> and are deterministic, based on project, application, service and API. We try to avoid port collision as best as we can: in other words, you can share configuration for your debug tools, <code>swagger</code>, <code>kreya</code>, DB client configurations, etc... Everyone gets the same setup!</p> <p>Your frontend logs that also <pre><code>web/frontend   &gt;&gt; will run on http://localhost:XXXX\n</code></pre></p> <p>Click on the url and you get</p> <p></p> <p>The website has a nice little nugget: by default, the <code>Next.js</code> agent creates a page that show you how in code you access your APIs:</p> <p></p> <p>For example, to fetch the data for the statistics, you would use <code>codefly JavaScript SDK</code>:</p> <pre><code>const { routing } = useCodeflyContext();\nconst url = routing(\n    \"GET\",\n    { application: \"backend\", service: \"server\" },\n    \"/visit/statistics\"\n)\n</code></pre>"},{"location":"tutorials/website-visits/introduction/#cli-frontend-companion","title":"CLI frontend companion","text":"<p>The CLI output is nice but it will quickly get quite busy. So <code>codefly</code> comes with its own frontend to help you developing.</p> <p>Just add the <code>--server</code> flag will run a <code>gRPC/http</code> server with the CLI.</p> <p></p> <p>You can see in a glance the structure of your project. For example, clicking on one application will show you the services running and their dependencies</p> <p></p> <p>The companion also provides a convenient way to test your REST endpoints:</p> <p></p>"}]}